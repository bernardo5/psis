/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _RESPONSE RESPONSE;
typedef struct _CLIENTMESSAGE CLIENTMESSAGE;


/* --- enums --- */


/* --- messages --- */

struct  _RESPONSE
{
  ProtobufCMessage base;
  int32_t type;
  char *login_valid;
  char *m_forward;
  char *username_sender;
  char *old_messages;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


struct  _CLIENTMESSAGE
{
  ProtobufCMessage base;
  int32_t type;
  char *username;
  char *message;
  char *id_min;
  char *id_max;
};
#define CLIENT__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client__message__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


/* RESPONSE methods */
void   response__init
                     (RESPONSE         *message);
size_t response__get_packed_size
                     (const RESPONSE   *message);
size_t response__pack
                     (const RESPONSE   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const RESPONSE   *message,
                      ProtobufCBuffer     *buffer);
RESPONSE *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (RESPONSE *message,
                      ProtobufCAllocator *allocator);
/* CLIENTMESSAGE methods */
void   client__message__init
                     (CLIENTMESSAGE         *message);
size_t client__message__get_packed_size
                     (const CLIENTMESSAGE   *message);
size_t client__message__pack
                     (const CLIENTMESSAGE   *message,
                      uint8_t             *out);
size_t client__message__pack_to_buffer
                     (const CLIENTMESSAGE   *message,
                      ProtobufCBuffer     *buffer);
CLIENTMESSAGE *
       client__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client__message__free_unpacked
                     (CLIENTMESSAGE *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RESPONSE_Closure)
                 (const RESPONSE *message,
                  void *closure_data);
typedef void (*CLIENTMESSAGE_Closure)
                 (const CLIENTMESSAGE *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor client__message__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_messages_2eproto__INCLUDED */
